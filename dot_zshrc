# mise config
eval "$(/home/fahmi/.local/bin/mise activate zsh)"

# If you come from bash you might have to change your $PATH.
export PATH=$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/home/fahmi/.oh-my-zsh"

plugins=(git vi-mode direnv tmux fzf fzf-tab ubuntu zsh-autosuggestions zsh-syntax-highlighting
  nix-zsh-completions autoupdate docker docker-compose)

source $ZSH/oh-my-zsh.sh

#########################
# Environment Variables #
#########################

# Set default editor
export EDITOR="nvim"

# Set default pager for ranger
export PAGER="less"

# Have make use all of the systems cores
export MAKEFLAGS="-j$(nproc)"

# Add ccache to the system PATH
export PATH="/usr/lib/ccache/bin:$PATH"

# WSL
# ---

# Set DISPLAY var for connecting to external X server
# export DISPLAY=localhost:0.0
export DISPLAY=$(sed -n 's/nameserver //p' /etc/resolv.conf):0

# Get the IP address from /etc/resolv.conf
export WSL_LOCALHOST=$(awk '/nameserver/ {print $2}' /etc/resolv.conf)

# node
# ----

export PATH=~/.npm-global/bin:${PATH}

# tmux plugins
# ------------

export PATH=~/.config/tmux/plugins/t-smart-tmux-session-manager/bin:$PATH

# fzf
# ---

# Set rg as the default source for fzf
export FZF_DEFAULT_COMMAND="rg --files --no-ignore --hidden --follow -g '!.{git,__py*}/*' 2> /dev/null"

# Set rg as the default source for the main fzf keybinds
# ctrl+t
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Set options for <c-t> command
export FZF_CTRL_T_OPTS="
  --preview 'bat -n --color=always {}'
  --preview-window hidden
  --bind '?:toggle-preview'
  --header '?: toggle file preview'"

# alt+c
export FZF_ALT_C_COMMAND='fd -t d --no-ignore -HL -E "{.git,__py*}" -E node_modules -E vendor'

# Set default options for the fzf app
export FZF_DEFAULT_OPTS="-i -m --reverse --border"

# eza
# ---

# Make it so that eza behaves as though the `--icons` option has been set
export EZA_ICONS_AUTO=1

# Final path entry
# ----------------

# Add ~/bin to the system path
export PATH=~/bin:$PATH

#####################
# Other Shell Stuff #
#####################

#============
# zsh options
#============

# Enable extended globbing
setopt extended_glob

#=======
# Prompt
#=======

# No need to source if we're using starship
# [[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

#============
# Keybindings
#============

# General
# -------

# Ctrl+f to move forward by one word. This makes it easier to use the autosuggest plugin.
bindkey '^f' forward-word

# Ctrl+b to move backwards by one word.
bindkey '^b' backward-word

# fzf
# ---

# Ctrl+v to trigger the fzf-cd-widget
bindkey '^v' fzf-cd-widget

# fzf
# ---

# Ctrl+v to call the fzf-cd-widget
bindkey '^v' fzf-cd-widget

###########
# Aliases #
###########

#===
# ls
#===

alias ls='eza'
alias l.='ls -d .*(/,.,@)' # Read more about zsh glob qualifiers (i.e., everything in parentheses)
alias ll='ls -l'
alias lt='ls --tree'

#====
# cat
#====

# Replace cat with bat and set it to the terminal theme
alias cat='bat --theme ansi'

# Have the system cat aliased to syscat
alias syscat='/bin/cat'

#=====
# grep
#=====

# Add color to grep matches
alias grep='grep --color=auto'

# grep with Perl regex syntax
alias greP='grep -P'

#========
# ripgrep
#========

# Enable PCRE2 style regexes by default and make it so that colored output is retained
# even when piped
alias rg='rg --pcre2 --color always'

#===
# fd
#===

# Make it so that colored output is retained even when piped
alias fd='fd --color always'

#=======
# Zellij
#=======

# Start new session
alias zs='zellij -s'

# Attach to existing session
alias za='zellij a'

# List all sessions
alias zl='zellij ls'

# Kill session
alias zk='zellij k'

# Kill all sessions
alias zka='zellij ka'

#=======
# Zellij
#=======

# Start new session
alias zs='zellij -s'

# Attach to existing session
alias za='zellij a'

# Start list existing sessions
alias zl='zellij ls'

# Kill session
alias zk='zellij k'

# Kill all sessions
alias zka='zellij ka'

# Delete session
alias zd='zellij delete-session'

#=====
# Task
#=====

# Alias "go-task" to "task"
alias task='go-task'

#=====================
# Administrative stuff
#=====================

# Package management
# ------------------

#======================
# General purpose stuff
#======================

# Sourcing .zshrc file
# ---------------------
alias srczsh='source ~/.zshrc'

# Managing files and directories
# ------------------------------

# Make file executable
x() { chmod +x "$@"; }

# Combine pdf files
joinpdf() {
	gs -sDEVICE=pdfwrite -sPAPERSIZE=a4 -dFIXEDMEDIA -dPDFFitPage \
		-dCompatibilityLevel=1.4 -o "$@"
}

# Compress pdf files
presspdf() {
	gs -dNOPAUSE -dBATCH -dQUIET -sDEVICE=pdfwrite \
		-dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -o "$@"
}

# Create numbered directories from cat output
numbered_dirs() {
	nl -n rz -w 2 -s "-" - | xargs mkdir
}

# Convert files to dotfiles
# (Makes it so that I don't have to move files to another directory for "file-not-found"
# checks)
dot() {
	for file in "$@"; do
		mv "$file" ".${file}"
	done
}

# Convert dotfiles back to their original state
# (Undoes dot())
# Note: ${file#.} is substring removal. Google parameter expansion for more details
undot() {
	for file in "$@"; do
		mv "$file" "${file#.}"
	done
}

# Convert files into backup files
# (Add the .bak extension to the files)
bak() {
	rename 's/$/\.bak/' "$@"
}

# Make backup copy of file
cpbak() {
	for file in "$@"; do
		cp "$file" "${file}.bak"
	done
}

# Convert backup files to regular files
unbak() {
	rename 's/\.bak$//' "$@"
}

# Create an alias to the perl-rename command
# For some reason this doesn't work. I'll have to figure out why.
#alias rename='perl-rename'

#===============
# Neovim aliases
#===============

# Set nvim to vim
alias vim='nvim'

#======================
# Programming - General
#======================

# git
#----

# Create and initialize a git repo
gitrepo() {
	REPONAMES=( "$@" )
	for repo in ${REPONAMES[@]}; do
		mkdir $repo
		cd $repo
		git init
		cd ..
	done
}

# Create and initialize a bare repo
gitrepobare() {
	REPONAMES=( "$@" )
	for repo in ${REPONAMES[@]}; do
		mkdir $repo
		cd $repo
		git init --bare
		cd ..
	done
}

# Python
#-------

# Update all packages in current virtualenv
pipud() {
	pip freeze | awk -F== '{print $1}' | xargs pip install -U
}

#================================
# Programming - Language specific
#================================

# Python
#-------

# go
# --

# Add go to PATH
export PATH="$PATH:/usr/local/go/bin"

# Set GOPATH
# Don't need to set GOBIN as it defaults to $GOPATH/bin
export GOPATH="/home/fahmi/.go"

# Add ~/.go/bin to PATH
export PATH="${PATH}:/home/fahmi/.go/bin"

# R
# -

# Launch R via radian
alias r='radian'

#======================================
# Aliases for databases/web development
#======================================

#==========
# Net stuff
#==========

# Ping google to test internet connectivity
alias testnet='ping -c 3 www.google.com'

#==================================
# Aliases for accessing directories
#==================================

#====================
# Convenience aliases
#====================

# Exit terminal
alias q='exit'

# Moving to the directory above
#------------------------------

# Maybe combine the following three aliases into a function

# Go up one directory
alias ..='cd ..'

# Go up two directories
alias ...='cd ../..'

# Go up three directories
alias ....='cd ../../..'

# View the directory(ies) above the current one
#----------------------------------------------

# Go up one directory and list contents
alias l..='cd .. && ls'

# Go up two directories and list contents
alias l...='cd ../.. && ls'

# Go up three directories and list contents
alias l....='cd ../../.. && ls'

# Viewing and cd-ing into directories
#------------------------------------

# cd into directory and immediately list contents
cdl() {
	cd "$@" && ls
}

# Clear screen and list directory contents
alias cls='clear && ls'

# Jump to somewhere in the file system using fzf
j() {
    cd $(fd --color never -H -I -d 4 -t d \
        -E '{.git,__py*}' \
        -E node_modules \
        -E vendor \
        . ~ /mnt/f/ /mnt/d/ /mnt/c/Users/Fahmi/ \
        | fzf)
}

# Use walk
lk() {
  cd "$(walk --icons "$@")"
}

# Create shorter alias for yazi
alias yz='yazi'

# Sesh
# Maybe put this in a separate file for scripts to be called from functions defined
# in zshrc
t() {
    sesh connect $(
      # sesh list --icons | fzf -p 80%,70% \
      sesh list --icons | fzf \
        --no-sort --ansi --border-label ' sesh ' --prompt '‚ö°  ' \
        --header '  ^a all ^t tmux ^g configs ^x zoxide ^d tmux kill ^f find ? toggle preview' \
        --bind 'tab:down,btab:up' \
        --bind 'ctrl-a:change-prompt(‚ö°  )+reload(sesh list --icons)' \
        --bind 'ctrl-t:change-prompt(ü™ü  )+reload(sesh list -t --icons)' \
        --bind 'ctrl-g:change-prompt(‚öôÔ∏è  )+reload(sesh list -c --icons)' \
        --bind 'ctrl-x:change-prompt(üìÅ  )+reload(sesh list -z --icons)' \
        --bind 'ctrl-f:change-prompt(üîé  )+reload(fd -H -I -d 4 -t d . ~ /mnt/d/ /mnt/f/)' \
        --bind 'ctrl-d:execute(tmux kill-session -t {2..})+change-prompt(‚ö°  )+reload(sesh list --icons)' \
        --bind '?:toggle-preview' \
        --preview 'sesh preview {}' \
        --preview-window hidden
        # --preview-window 'right:55%' \
    )
}

#================================
# Stuff for command line programs
#================================

# Note: all of the autojump stuff is handled by the autojump plugin so I no longer need to
# source the autojump script.
#
# Will stop using autojump until the AUR package maintainer fixes it and use z instead.

# z
# -

# Prevent z from resolving symlinks
#$_Z_NO_RESOLVE_SYMLINKS=true
$_Z_NO_RESOLVE_SYMLINKS=false

###############
# Final inits #
###############

# Init starship prompt
eval "$(starship init zsh)"

# Init zoxide
eval "$(zoxide init zsh)"

# uv stuff
. "$HOME/.cargo/env"

# opam init
[[ ! -r '/home/fahmi/.opam/opam-init/init.zsh' ]] || source '/home/fahmi/.opam/opam-init/init.zsh' > /dev/null 2> /dev/null

# >>> mamba initialize >>>
# !! Contents within this block are managed by 'micromamba shell init' !!
export MAMBA_EXE='/home/fahmi/.local/bin/micromamba';
export MAMBA_ROOT_PREFIX='/home/fahmi/micromamba';
__mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    alias micromamba="$MAMBA_EXE"  # Fallback on help from micromamba activate
fi
unset __mamba_setup
# <<< mamba initialize <<<

# bun completions
# [ -s "/home/fahmi/.bun/_bun" ] && source "/home/fahmi/.bun/_bun"

# bun
# export BUN_INSTALL="$HOME/.bun"
# export PATH="$BUN_INSTALL/bin:$PATH"
